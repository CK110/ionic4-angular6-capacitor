{"version":3,"sources":["webpack:///./src/app/form-sample-page/form-sample-page-routing.module.ts","webpack:///./src/app/form-sample-page/form-sample-page.component.html","webpack:///./src/app/form-sample-page/form-sample-page.component.scss","webpack:///./src/app/form-sample-page/form-sample-page.component.ts","webpack:///./src/app/form-sample-page/form-sample-page.module.ts","webpack:///./src/app/post-test/post-test.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEgB;AAEvE,IAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,mFAAuB,EAAE;CACjD,CAAC;AAMF;IAAA;IAA2C,CAAC;IAA/B,2BAA2B;QAJvC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,2BAA2B,CAAI;IAAD,kCAAC;CAAA;AAAJ;;;;;;;;;;;;ACbxC,+uJ;;;;;;;;;;;ACAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACT;AACwB;AAOjE;IAcE,iCAAoB,OAAwB,EAAU,MAAc;QAAhD,YAAO,GAAP,OAAO,CAAiB;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEzE,0CAAQ,GAAR,cAAa,CAAC;IAEd,sCAAI,GAAJ,UAAK,IAAS;QACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC;QAC3D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IACjC,CAAC;IArBU,uBAAuB;QALnC,+DAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;;;SAGjC,CAAC;yCAe6B,4EAAe,EAAkB,sDAAM;OAdzD,uBAAuB,CAsBnC;IAAD,8BAAC;CAAA;AAtBmC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTK;AACI;AACE;AACF;AAE0B;AACS;AAWhF;IAAA;IAAmC,CAAC;IAAvB,oBAAoB;QAThC,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4FAA2B;gBAC3B,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;aACZ;YACD,YAAY,EAAE,CAAC,mFAAuB,CAAC;SACxC,CAAC;OACW,oBAAoB,CAAG;IAAD,2BAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBU;AACO;AAGlD;IACE,yBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,8BAAI,GAAJ,UAAK,IAAS;QACZ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IALU,eAAe;QAD3B,gEAAU,EAAE;yCAEe,+DAAU;OADzB,eAAe,CAM3B;IAAD,sBAAC;CAAA;AAN2B","file":"form-sample-page-form-sample-page-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { FormSamplePageComponent } from './form-sample-page.component';\n\nconst routes: Routes = [\n  { path: '', component: FormSamplePageComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class FormSamplePageRoutingModule { }\n","module.exports = \"<ion-app>\\n  <form #myForm=\\\"ngForm\\\" class=\\\"ion-page\\\">\\n    <ion-header>\\n      <ion-toolbar>\\n        <ion-title>Sample Form</ion-title>\\n      </ion-toolbar>\\n    </ion-header>\\n    <ion-content padding>\\n      <ion-list>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">First Name</ion-label>\\n          <ion-input name=\\\"firstName\\\" #viewFirstName=\\\"ngModel\\\" [(ngModel)]=\\\"firstName\\\" required minlength=\\\"2\\\"></ion-input>\\n        </ion-item>\\n        <ion-text *ngIf=\\\"viewFirstName.invalid && (viewFirstName.dirty || viewFirstName.touched)\\\" color=\\\"danger\\\">\\n          <small *ngIf=\\\"viewFirstName.errors['required']\\\">First Name is required</small>\\n          <small *ngIf=\\\"viewFirstName.errors['minlength']\\\">First Name must be at least 2 characters long</small>\\n        </ion-text>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Last Name</ion-label>\\n          <ion-input name=\\\"lastName\\\" #viewLastName=\\\"ngModel\\\" [(ngModel)]=\\\"lastName\\\" required minlength=\\\"4\\\"></ion-input>\\n        </ion-item>\\n        <ion-text *ngIf=\\\"viewLastName.invalid && (viewLastName.dirty || viewLastName.touched)\\\" color=\\\"danger\\\">\\n          <small *ngIf=\\\"viewLastName.errors['required']\\\">Last Name is required</small>\\n          <small *ngIf=\\\"viewLastName.errors['minlength']\\\">Last Name must be at least 4 characters long</small>\\n        </ion-text>\\n        <ion-item>\\n          <ion-label>Desired Job Title</ion-label>\\n          <ion-select name=\\\"jobTitle\\\" [(ngModel)]=\\\"jobTitle\\\" #viewJobTitle=\\\"ngModel\\\" required>\\n            <ion-select-option value=\\\"manager\\\">Cat Herder</ion-select-option>\\n            <ion-select-option value=\\\"captain\\\">Nerf Herder (Scruffy)</ion-select-option>\\n            <ion-select-option value=\\\"engineer\\\">Cat</ion-select-option>\\n            <ion-select-option value=\\\"tester\\\">Trier of Things</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <ion-text *ngIf=\\\"viewJobTitle.invalid && (viewJobTitle.dirty || viewJobTitle.touched)\\\" color=\\\"danger\\\">\\n          <small *ngIf=\\\"viewJobTitle.errors['required']\\\">Job Title is required</small>\\n        </ion-text>\\n        <ion-item-divider>\\n          <ion-label>I Would Like To:</ion-label>\\n        </ion-item-divider>\\n        <ion-item>\\n          <ion-label>Drink the Beers</ion-label>\\n          <ion-toggle name=\\\"drinkBeers\\\" color=\\\"dark\\\" [(ngModel)]=\\\"drinkBeers\\\"></ion-toggle>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Drink the Teas</ion-label>\\n          <ion-toggle name=\\\"drinkTeas\\\" color=\\\"secondary\\\" [(ngModel)]=\\\"drinkTeas\\\"></ion-toggle>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Make the Coffees</ion-label>\\n          <ion-toggle name=\\\"makeCoffee\\\" color=\\\"primary\\\" [(ngModel)]=\\\"makeCoffee\\\"></ion-toggle>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Feed the Engineers</ion-label>\\n          <ion-toggle name=\\\"feedEngineers\\\" color=\\\"danger\\\" [(ngModel)]=\\\"feedEngineers\\\"></ion-toggle>\\n        </ion-item>\\n          <ion-item>\\n          <ion-label position=\\\"floating\\\">Short Self Description</ion-label>\\n          <ion-textarea name=\\\"selfDescription\\\" #viewSelfDescription=\\\"ngModel\\\" [(ngModel)]=\\\"selfDescription\\\" required minlength=\\\"25\\\"></ion-textarea>\\n        </ion-item>\\n        <ion-text *ngIf=\\\"viewSelfDescription.invalid && (viewSelfDescription.dirty || viewSelfDescription.touched)\\\" color=\\\"danger\\\">\\n          <small *ngIf=\\\"viewSelfDescription.errors['required']\\\">Self Description is required</small>\\n          <small *ngIf=\\\"viewSelfDescription.errors['minlength']\\\">Please tell us more</small>\\n        </ion-text>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Desired Salary</ion-label>\\n          <ion-input name=\\\"desiredSalary\\\" #viewSalary=\\\"ngModel\\\" type=\\\"number\\\" required [(ngModel)]=\\\"desiredSalary\\\"></ion-input>\\n        </ion-item>\\n        <ion-text *ngIf=\\\"viewSalary.invalid && (viewSalary.dirty || viewSalary.touched)\\\" color=\\\"danger\\\">\\n          <small *ngIf=\\\"viewSalary.errors['required']\\\">Desired Salary is required</small>\\n        </ion-text>\\n        <ion-item-divider>\\n          <ion-label>My Level of Happy</ion-label>\\n        </ion-item-divider>\\n        <ion-item>\\n          <ion-range name=\\\"levelOfHappy\\\" [(ngModel)]=\\\"levelOfHappy\\\">\\n            <ion-icon name=\\\"sad\\\" slot=\\\"start\\\"></ion-icon>\\n            <ion-icon name=\\\"happy\\\" slot=\\\"end\\\"></ion-icon>\\n          </ion-range>\\n        </ion-item>\\n      </ion-list>\\n    </ion-content>\\n    <ion-footer>\\n      <ion-button expand=\\\"block\\\" [disabled]=\\\"myForm.invalid\\\" (click)=\\\"save(myForm.value)\\\">\\n        <ion-icon name=\\\"save\\\" slot=\\\"start\\\"></ion-icon>Looks Good to Me</ion-button>\\n    </ion-footer>\\n  </form>\\n</ion-app>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { PostTestService } from '../post-test/post-test.service';\n\n@Component({\n  selector: 'app-form-sample-page',\n  templateUrl: './form-sample-page.component.html',\n  styleUrls: ['./form-sample-page.component.scss']\n})\nexport class FormSamplePageComponent implements OnInit {\n  firstName: string;\n  lastName: string;\n  jobTitle: string;\n\n  drinkBeers: boolean;\n  drinkTeas: boolean;\n  makeCoffee: boolean;\n  feedEngineers: boolean;\n\n  selfDescription: string;\n  desiredSalary: number;\n  levelOfHappy: number;\n\n  constructor(private postman: PostTestService, private router: Router) { }\n\n  ngOnInit() { }\n\n  save(data: any) {\n    this.postman.post(data).subscribe(res => console.log(res));\n    this.router.navigate(['home']);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\n\nimport { FormSamplePageComponent } from './form-sample-page.component';\nimport { FormSamplePageRoutingModule } from './form-sample-page-routing.module';\n\n@NgModule({\n  imports: [\n    FormSamplePageRoutingModule,\n    CommonModule,\n    FormsModule,\n    IonicModule\n  ],\n  declarations: [FormSamplePageComponent]\n})\nexport class FormSamplePageModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class PostTestService {\n  constructor(private http: HttpClient) { }\n\n  post(data: any) {\n    return this.http.post('http://localhost:5000/test', data);\n  }\n}\n"],"sourceRoot":""}